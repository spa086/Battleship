name: Deploy Star battle to production

on:
  push:
    branches:
      - release

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Setting key
      run: |
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > private_key
        chmod 600 private_key

    - name: Create passphrase script and make it executable
      run: |
        echo 'echo $SSHPASS' > passphrase_script.sh
        chmod +x passphrase_script.sh

    - name: Test SSH connection using passphrase script
      env:
        SSHPASS: ${{ secrets.SSH_PASSPHRASE }}
      run: |
        export SSH_ASKPASS=./passphrase_script.sh
        ssh -i private_key -o StrictHostKeyChecking=no -o "BatchMode yes" root@167.172.102.146 "echo 'SSH connection with passphrase script successful'"


    - name: Test SSH authentication with ssh-agent
      run: |
        eval "$(ssh-agent -s)"
        echo "${{ secrets.SSH_PRIVATE_KEY }}" | fold -w 64 > private_key
        chmod 600 private_key
        echo "${{ secrets.SSH_PASSPHRASE }}" | ssh-add private_key -
        ssh -o StrictHostKeyChecking=no -v root@167.172.102.146 "echo 'SSH authentication with ssh-agent successful'"

    - name: Start SSH agent and add private key
      run: |
        eval "$(ssh-agent -s)"
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > private_key
        chmod 600 private_key
        echo "${{ secrets.SSH_PASSPHRASE }}" | ssh-add private_key -

    - name: Test SSH authentication
      run: ssh -i private_key -o StrictHostKeyChecking=no -v root@167.172.102.146 "echo 'SSH authentication successful'"
      env:
        SSHPASS: ${{ secrets.SSH_PASSPHRASE }}
        
    - name: Test SSH authentication
      run: sshpass -e ssh -i private_key -o StrictHostKeyChecking=no root@167.172.102.146 "echo 'SSH authentication successful'"
      env:
        SSHPASS: ${{ secrets.SSH_PASSPHRASE }}

    - name: Test transfer with a smaller file using scp
      run: echo "test" > test.txt && sshpass -e scp -i private_key -o StrictHostKeyChecking=no -C -p test.txt root@167.172.102.146:/tmp
      env:
        SSHPASS: ${{ secrets.SSH_PASSPHRASE }}

    - name: Test transfer with a smaller file
      run: echo "test" > test.txt && sshpass -e rsync -e "ssh -i private_key -o StrictHostKeyChecking=no" -avvvz --progress test.txt root@167.172.102.146:/tmp
      env:
        SSHPASS: ${{ secrets.SSH_PASSPHRASE }}

    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 7.0.x

    - name: Restore dependencies
      run: dotnet restore Battleship.sln

    - name: Build app
      run: dotnet publish --configuration Release -r ubuntu.22.04-x64 --self-contained true --output ./publish
      
    - name: Install Docker
      run: |
        sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
        sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
        sudo apt-get update
        sudo apt-get install -y docker-ce   
      
    - name: Build Docker image
      run: docker build -t game-server:${{ github.sha }} -f docker/Dockerfile .

    - name: Create archive
      run: docker save game-server:${{ github.sha }} | gzip > game-server.tar.gz

    - name: Calculating size of image
      run: du -h game-server.tar.gz

    - name: Transfer Docker image to DigitalOcean instance
      run: sshpass -e rsync -e "ssh -i private_key -o StrictHostKeyChecking=no" -avvvz --progress game-server.tar.gz root@167.172.102.146:/tmp        
      env:
        SSHPASS: ${{ secrets.SSH_PASSPHRASE }}

    - name: Deploy to DigitalOcean
      run: |
        sshpass -e ssh -i private_key -o StrictHostKeyChecking=no root@167.172.102.146 "docker load < /tmp/game-server.tar.gz"
        sshpass -e ssh -i private_key -o StrictHostKeyChecking=no root@167.172.102.146 "docker stop game-server || true && docker rm game-server || true"
        sshpass -e ssh -i private_key -o StrictHostKeyChecking=no root@167.172.102.146 "docker run -d -p 80:80 --name game-server game-server:${{ github.sha }}"
      env:
        SSHPASS: ${{ secrets.SSH_PASSPHRASE }}